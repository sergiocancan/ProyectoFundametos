#!/usr/bin/env python
#
 
from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState
 
from markers import *
from functions import *
 
 
# Initialize the node
rospy.init_node("testKineControlPosition")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=10)
# Files for the logs
fxcurrent = open("/tmp/xcurrent.txt", "w")                
fxdesired = open("/tmp/xdesired.txt", "w")
fq = open("/tmp/q.txt", "w")
 
# Markers for the current and desired positions
bmarker_current  = BallMarker(color['RED'])
bmarker_desired = BallMarker(color['GREEN'])
 
# Joint names
jnames = ['joint1', 'joint2', 'joint3','joint4', 'joint5', 'joint6', 'joint7']
 
# Desired position
xd = np.array([1.5, -0.8, 0.4])
#xd=  np.array([0, 0, 0])
# Initial configuration
q0  = np.array([0.0, 0,0,0,-0.15, 0, 0.0])
 
# Resulting initial position (end effector with respect to the base link)
T = fkine_urdf(q0)
x0 = T[0:3,3]
 
# Red marker shows the achieved position
bmarker_current.xyz(x0)
# Green marker shows the desired position
bmarker_desired.xyz(xd)
 
# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0
 
# Frequency (in Hz) and control period 
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)
 
# Initial joint configuration
q = copy(q0)
x = copy(x0)
delta=0.0001
epsilon  = 0.001
#ganacia y ganancia de amortiguamiento 
k = 0.5 #valor dado por la guia luego k=0.1,k=1,k=10,k=100
ka= 0.05
#matriz identidad
I=np.array([[1,0,0],
            [0,1,0],
            [0,0,1]])
 
cont=0
# Main loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Kinematic control law for position (complete here)
    # -----------------------------
    e=x-xd
    e_dot=-k*e
    J=jacobian_urdf(q,delta) 
    if cont ==0:
        print("Tam. del Jacobiano:")
        print(J.shape)
        print("El rango del jacobiano:")
        print(np.linalg.matrix_rank(J))
    q_dot=J.T.dot(np.linalg.inv(J.dot(J.T)+ka**2*I)).dot(e_dot) #Forma amortiguada
    q=q+dt*q_dot
    T=fkine_urdf(q)
    x=T[0:3,3]
    cont=cont+1
    if (np.linalg.norm(e) < epsilon):
        print('numero de iteraciones: ',cont)
        break
    # -----------------------------
 
    
    # Log values                                                      
    fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
    fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
    fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
             str(q[4])+" "+str(q[5])+str(q[6])+"\n")
    
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.xyz(xd)
    bmarker_current.xyz(x)
    # Wait for the next iteration
    rate.sleep()
 
print('ending motion ...')
fxcurrent.close()
fxdesired.close()
fq.close()
